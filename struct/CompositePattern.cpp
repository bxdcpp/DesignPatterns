/**************************************************************************
* 组合模式
*
意图：将对象组合成树形结构以表示"部分-整体"的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。

主要解决：它在我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以像处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。

何时使用： 1、您想表示对象的部分-整体层次结构（树形结构）。 2、您希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。

如何解决：树枝和叶子实现统一接口，树枝内部组合该接口。

关键代码：树枝内部组合该接口，并且含有内部属性 List，里面放 Component。

应用实例： 1、算术表达式包括操作数、操作符和另一个操作数，其中，另一个操作符也可以是操作数、操作符和另一个操作数。 2、在 JAVA AWT 和 SWING 中，对于 Button 和 Checkbox 是树叶，Container 是树枝。

优点： 1、高层模块调用简单。 2、节点自由增加。

缺点：在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则。

使用场景：部分、整体场景，如树形菜单，文件、文件夹的管理。

注意事项：定义时为具体类。
**************************************************************************/

#include <string>
#include <vector>
#include <algorithm>
#include <iostream>

using namespace std;

class Employee
{
public:
	Employee(string name, string  dept, int sal)
		:name(name)
		, dept(dept)
		, salary(sal)
	{
		subordinates.reserve(100);
	}
	void add(Employee* e)
	{
		subordinates.push_back(e);
	}
	void remove(Employee *e)
	{
		std::remove(subordinates.begin(), subordinates.end(), e);
	}

	bool operator == (const Employee* e)
	{
		return  (this->name == e->name && this->dept == e->dept && this->salary == e->salary);
	}
	vector<Employee*> getSubordinates()
	{
		return subordinates;
	}
	string Info() const
	{
		string info = "Employee :[ Name : ";
		info += this->name;
		info += ", dept : ";
		info += this->dept;
		info += ", salary :";
		info += to_string(this->salary);
		info += " ]";
		return info;
	}
private:
	string name;
	string dept;
	int salary;
	vector<Employee*> subordinates;
};

void printEmployee(Employee* emp)
{
	auto eVec = emp->getSubordinates();
	for (auto it : eVec)
	{
		auto subord = it->getSubordinates();
		for_each(subord.cbegin(), subord.cend(), [=](const Employee* e)->void {cout << "e:" << e->Info(); });
		cout << endl;
	}
	
}

int main()
{
	Employee* CEO = new Employee("John", "CEO", 30000);

	Employee* headSales = new Employee("Robert", "Head Sales", 20000);

	Employee* headMarketing = new Employee("Michel", "Head Marketing", 20000);

	Employee* clerk1 = new Employee("Laura", "Marketing", 10000);
	Employee* clerk2 = new Employee("Bob", "Marketing", 10000);

	Employee* salesExecutive1 = new Employee("Richard", "Sales", 10000);
	Employee* salesExecutive2 = new Employee("Rob", "Sales", 10000);

	CEO->add(headSales);
	CEO->add(headMarketing);

	headSales->add(salesExecutive1);
	headSales->add(salesExecutive2);

	headMarketing->add(clerk1);
	headMarketing->add(clerk2);
	//printEmployee(CEO);

	cout << CEO->Info() << endl;
	for (auto headEmployee : CEO->getSubordinates())
	{
		cout << headEmployee->Info() << endl;
		for (auto employee : headEmployee->getSubordinates())
		{
			cout << employee->Info() << endl;
		}
	}
	return 0;
}